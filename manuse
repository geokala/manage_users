#! /usr/bin/env python3
import os
import subprocess
import sys


def main(args):
    """
        Determine which subcommand to execute, or show available subcommands.

        Keyword arguments:
        args -- List of arguments from stdin, excepting the program name-
                sys.argv[1:]
    """
    # This is not compatible with Windows. We can handle that problem if it
    # manifests.
    paths = os.environ['PATH'].split(':')

    # Find out what executables we have in our path
    executables_in_path = []
    for path in paths:
        files = [
            os.path.join(path, item)
            for item in os.listdir(path)
        ]

        executables = [
            item for item in files
            if os.access(item, os.X_OK)
            and os.path.isfile(item)
        ]

        executables = [
            os.path.split(executable)[1]
            for executable in executables
        ]

        executables_in_path.extend(executables)

    # See which executables we care about
    subcommands = [
        executable for executable in executables_in_path
        if executable.startswith('manuse-')
    ]

    # Now get a list of subcommands
    subcommands = [subcommand[7:] for subcommand in subcommands]

    if len(args) > 0 and args[0] in subcommands:
        command = ['manuse-' + args[0]]
        command.extend(args[1:])
        subprocess.call(command)
    else:
        if len(args) > 0:
            error_output = ['{subcommand} is not a valid subcommand.']
        else:
            error_output = []
            args.append(None)

        error_output.extend([
            'Valid subcommands are: {subcommands}',
            'Get help on a subcommand with:',
            'manuse <subcommand> -h',
            'or',
            'manuse <subcommand> --help',
            '',
            'e.g',
            'manuse list -h',
        ])

        subcommands_help = ','.join(subcommands)

        error_output = '\n'.join(error_output).format(
            subcommand=args[0],
            subcommands=subcommands_help,
        )
        sys.stderr.write(error_output + '\n')
        sys.exit(1)


if __name__ == '__main__':
    main(sys.argv[1:])
