#! /usr/bin/env python3
import sys


class ManageUsersCLI(object):
    """
        Parser for commands to the manage_users library in a 'git' style.

        Argparse would be nice to use, but is extremely clunky for
        subcommands.
    """

    def __init__(self, config='/etc/manage_users.conf'):
        """
            Initialise the user management CLI.

            Keyword arguments:
            config -- Path to the config file for the CLI.
        """
        # Default program name, will be overridden when a command is run
        self.program_name = 'manuse'

        self.commands = {
            'list': {
                'func': self.list_users,
                'help': 'List users.',
                'arguments': {
                    'example': {
                        'help': 'This does stuff.',
                        'values': ['a', 'b', 'c'],
                    },
                },
            },
            'create': {
                'func': self.create_user,
                'help': 'Create a new user.',
                'arguments': {
                    'example': {
                        'help': 'This does stuff.',
                        'values': ['a', 'b', 'c'],
                    },
                },
            },
            'sshkey': {
                'func': self.sshkey,
                'help': 'Manage SSH keys for a user.',
                'arguments': {
                    'example': {
                        'help': 'This does stuff.',
                        'values': ['a', 'b', 'c'],
                    },
                },
            },
            'modify': {
                'func': self.modify_user,
                'help': 'Modify a user, including disabling/enabling.',
                'arguments': {
                    'example': {
                        'help': 'This does stuff.',
                        'values': ['a', 'b', 'c'],
                    },
                },
            },
            'configure': {
                'func': self.configure,
                'help': 'Configure the behaviour of this tool.',
                'arguments': {
                    'example': {
                        'help': 'This does stuff.',
                        'values': ['a', 'b', 'c'],
                    },
                },
            },
        }

    def list_users(self):
        pass

    def create_user(self):
        pass

    def sshkey(self):
        pass

    def modify_user(self):
        pass

    def configure(self):
        pass

    def print_usage(self, output_stream=sys.stdout, subcommand=None):
        """
            Provide usage for the CLI or a given subcommand.

            Keyword arguments:
            subcommand -- Help for a given subcommand.
        """
        if subcommand is None:
            commands_help = ''.join([
                '{command} -- {help}\n'.format(
                    command=command, help=details['help']
                )
                for command, details in self.commands.items()
            ])
            output = (
                'Usage:\n'
                '{progname} <command>\n'
                '\n'
                'Get additional help on commands with:\n'
                '{progname} <command> help\n'
                '\n'
                'Available commands:\n'
                '{commands}'
            )
            output = output.format(
                progname=self.program_name,
                commands=commands_help,
            )
            output_stream.write(output)
        # TODO: Implement for subcommands

    def run_command(self, args):
        """
            Run a command based on args passed from the command line.

            Keyword arguments:
            args -- Arguments passed from the command line (sys.argv).
        """
        self.program_name = args[0]

        if len(args) < 2:
            sys.stderr.write('You must choose a command.\n\n')
            self.print_usage(output_stream=sys.stderr)
            sys.exit(1)


if __name__ == '__main__':
    cli = ManageUsersCLI()
    cli.run_command(sys.argv)
