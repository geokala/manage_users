#! /usr/bin/env python3
import configparser
import os
import sys


class ManageUsersCLI(object):
    """
        Parser for commands to the manage_users library in a 'git' style.

        Argparse would be nice to use, but is extremely clunky for
        subcommands.
    """
    def __init__(self, config):
        """
            Initialise the user management CLI.

            Keyword arguments:
            config -- Path to the config file for the CLI.
        """
        # Default program name, will be overridden when a command is run
        self.program_name = 'manuse'

        self.config_loaded = False
        self.config_path = config
        self.config = configparser.ConfigParser()

        self.commands = {
            'create': {
                'func': self.create_user,
                'help': 'Create a new user.',
                'arguments': {
                    'example': {
                        'help': 'This does stuff.',
                        'values': ['a', 'b', 'c'],
                    },
                },
            },
            'sshkey': {
                'func': self.sshkey,
                'help': 'Manage SSH keys for a user.',
                'arguments': {
                    'example': {
                        'help': 'This does stuff.',
                        'values': ['a', 'b', 'c'],
                    },
                },
            },
            'modify': {
                'func': self.modify_user,
                'help': 'Modify a user, including disabling/enabling.',
                'arguments': {
                    'example': {
                        'help': 'This does stuff.',
                        'values': ['a', 'b', 'c'],
                    },
                },
            },
        }

    def create_user(self):
        pass

    def sshkey(self):
        pass

    def modify_user(self):
        pass

    def run_command(self, args):
        """
            Run a command based on args passed from the command line.

            Keyword arguments:
            args -- Arguments passed from the command line (sys.argv).
        """
        self.program_name = args[0]

        if len(args) < 2:
            sys.stderr.write('You must choose a command.\n\n')
            self.print_usage(output_stream=sys.stderr)
            sys.exit(1)

        if not self.config_loaded:
            if args[1].strip() == 'configure':
                abort_on_error = False
            else:
                abort_on_error = True
            self.load_config(abort_on_error)

        try:
            command = self.commands[args[1]]
            if len(args) > 2 and args[2].strip() == 'help':
                self.print_usage(output_stream=sys.stdout,
                                 subcommand=args[1])
                sys.exit(0)
        except KeyError:
            if args[1].strip() != 'help':
                output = sys.stderr
            else:
                output = sys.stdout
            self.print_usage(output_stream=output)
            sys.exit(1)

        return command['func'](args[2:])


if __name__ == '__main__':
    config_path = os.path.join(
        os.path.expanduser('~'),
        '.manage_users.conf'
    )
    cli = ManageUsersCLI(config=config_path)

    cli.run_command(sys.argv)
