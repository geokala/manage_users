#! /usr/bin/env python3
from collections import defaultdict
import yaml

def list_users(playbook='examples/playbook.yml'):
    """
        Placehold
    """ # TODO: Write docstring
    with open(playbook) as playbook_handle:
        playbook_data = playbook_handle.read()
    playbook = yaml.load(playbook_data)

    # We currently only handle a single purpose playbook
    # The reading would be trivial, but writing logic would need changing
    playbook_tasks = playbook[0]['tasks']

    # Get all users
    users = defaultdict(dict)
    for task in playbook_tasks:
        if 'user' in task.keys():
            user = task['user']
            users[user['name']].update(user)
        elif 'authorized_key' in task.keys():
            key_details = task['authorized_key']
            users[user['name']]['key'] = key_details['key']

    return users

def output_users(users, show_active=True, show_inactive=False):
    """

        Placehold
    """ # TODO: Write docstring
    output = []
    output_template = '\n'.join((
        'User {user}',
        '  Description: {comment}',
        '  UID: {uid}',
        '  Groups: {groups}',
        '  Shell: {shell}',
        '  Active: {state}',
    ))

    state_mapping = {
        'present': True,
        'absent': False,
    }

    for user, details in users.items():
        state = state_mapping[details['state']]
        if state and show_active or (not state) and show_inactive:
            # Show only users that match the filter
            output.append(output_template.format(
                user=user,
                comment=details['comment'],
                uid=details['uid'],
                groups=details['groups'],
                shell=details['shell'],
                state=state,
            ))

    return output

if __name__ == '__main__':
    users = list_users()
    for line in output_users(users):
        print(line)
