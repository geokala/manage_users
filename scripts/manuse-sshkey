#! /usr/bin/env python3
import argparse
import configparser
from manage_users import SSHKeyNotFoundError
from manage_users.script_helpers import playbook_load_or_prompt_for_create
import os
import sys


def main(args, config_path):
    """
        Add an SSH key to a user, or disable an existing one.

        Keyword arguments:
        args -- A list of arguments from the command line with the program
                name removed (sys.argv[1:]).
        config_path -- The path to the manage_users config file.
    """
    parser = argparse.ArgumentParser(
        description="Modify a user's SSH keys.",
        prog='manuse sshkey',
    )

    parser.add_argument(
        '-u', '--username',
        help="The username to modify keys for.",
        required=True,
    )
    parser.add_argument(
        '-d', '--disable-sshkey',
        help='Disable one or more SSH keys. Integers will be treated as IDs.'
             ' The ID can be seen when listing users.'
             ' If the passed value is not an integer, keys that match will be'
             ' disabled.',
        nargs='+',
    )
    parser.add_argument(
        '-e', '--enable-sshkey',
        help='Enable one or more SSH keys. Integers will be treated as IDs.'
             ' The ID can be seen when listing users.'
             ' If the passed value is not an integer, keys that match will be'
             ' enabled or added.',
        nargs='+',
    )

    args = parser.parse_args(args)

    config = configparser.ConfigParser()
    try:
        with open(config_path) as config_handle:
            config.readfp(config_handle)
    except FileNotFoundError:
        sys.stderr.write(
            ('Could not find config file in {config_path}\n'
             'Please run configuration utility before use:\n').format(
                config_path=config_path
            )
        )
        sys.exit(1)

    # Find out where the playbook is
    playbook_path = config.get('ansible', 'playbook_path')

    if playbook_path is None:
        sys.stderr.write(
            ('Could not find playbook path in configuration.\n'
             'Please run configuration utility to set playbook path.\n')
        )
        sys.exit(1)

    # Get the base ID or use a default
    base_id = int(config.get('general', 'base_id')) or 10000

    user_manager = playbook_load_or_prompt_for_create(
        playbook_path=playbook_path,
        base_id=base_id,
    )

    # Make sure we have a usable value for enabling/disabling keys
    if args.enable_sshkey is None:
        enable_sshkeys = []
    else:
        enable_sshkeys = args.enable_sshkey
    if args.disable_sshkey is None:
        disable_sshkeys = []
    else:
        disable_sshkeys = args.disable_sshkey

    user_sshkeys = user_manager.get_users(
        include_active=True,
        include_inactive=True
    )[args.username]['sshkeys']

    for operation in ('enable', 'disable'):
        if operation == 'enable':
            keys = enable_sshkeys
            action = user_manager.enable_sshkey
        else:
            keys = disable_sshkeys
            action = user_manager.disable_sshkey

        for key in keys:
            found = True
            try:
                key = int(key)
            except ValueError:
                # This is an SSH key. Try to find it
                found = False
                for possible_key in range(0, len(user_sshkeys)):
                    if user_sshkeys[possible_key]['key'] == key:
                        # SSH key indexes are one indexed effectively
                        key = possible_key + 1
                        found = True

            if not found and operation == 'enable':
                user_manager.add_sshkey(args.username, key)
                found = True
            elif found:
                try:
                    action(args.username, key)
                except SSHKeyNotFoundError:
                    found = False

            if not found:
                sys.stderr.write('Key {key} not found.\n'.format(key=key))

    # Save the changes
    user_manager.save_playbook()

if __name__ == '__main__':
    config_path = os.path.join(
        os.path.expanduser('~'),
        '.manage_users.conf'
    )
    main(sys.argv[1:], config_path)
